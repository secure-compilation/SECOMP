* TODOs

** Parser and testing

[] Important fix in the Parser: in C2C.ml, we currently
   generate some [privileged_compartment] for the compartment
   of some variables. Should those be something else?

[] Fixing various things in the parser. Integrate the parsing of imports and exports with
   the rest of the parsing and compilation steps before "parsed C". 
   [] Fix [TODO] and [FIXME]

   -> Imports and exports are not checked for anything right now. 
   [] We should probably make sure compartments don't share names with variables, functions, and types.
   [] We probably need to add a step that checks that imports/exports are compatible so that we can
     obtain well-formed C programs. Also that you can't have things like "§comp§ void add(int, int);" and
     "§c1§ imports §add§ from §c2§" with §c2§ =/= §comp§.
     And same for exports
   [] This could also interfere with the Rename.ml file, so make sure things don't break there
   [] Elab.ml: does interesting things when it renames string identifiers to proper identifiers.
     In particular it uses environments. We should make sure that nothing funny is happening there.

[] Use the new syntax to write interesting examples!! Can we adapt some of CompCert examples?

[] Think about what kind of unit tests would be interesting. Try to write some of those,
   for instance checking that cross-comparmtent inlining is disabled/within-comparmtent inlining
   is enabled, …

** Property-based testing for our security property and its components

[] Figure out how to setup Quickchick
[] Have executable semantics for the source C language and the target ASM language withing QuickChick
[] Make a plan for what and how we are going to test our properties.
   -> What do we need to generate? Traces, programs, something else?
   -> What are good ways to generate those?
   -> What properties can we state? What properties can we hope to test?
   -> How did Nora's testing for SFI work and how can we adapt it to our setting?
[] Write the generators, write the properties, test everything!
[] Understand and fix what breaks.

** On our modifications to CompCert and its correctness proofs

[] Fix [TODO] and [FIXME] and [NOTE], or at least understand why they are not worth fixing
[] There is a lot of duplication in the way we obtain compartments: Genv.find_comp, 
   Genv.find_funct_ptr vs Genv.find_function_ptr, Genv.find_comp_ignore_offset, etc. 
   This seems *very* bad and worth fixing, as it makes the proof particulary redundant and ugly
[] In general: clean the proofs :(
[] Make the other backends compile. In these backends, ignore compartments completely.
[X] Try to merge current CompCert into our branch. That way we can identify the biggest changes we made
    and document them.
    /!\ If someone does that it's really important to use this opportunity to identify parts that could
    be simplified/that are redundant/etc.
    /!\ And also to write documentation

[] (Rob) Understand how callee/caller-saved works in CompCert. Can we make everything except arguments
   caller-saved (only for cross-compartment calls?)? (arguments do not need to be saved anyway)
   Implement that in CompCert. Two options:
   - everything caller-saved, always: performance issues
   - caller-saved only for cross-compartment calls, might be non-trivial modification
[] (Rob) Invalidation of registers: invalidate registers properly before a call or a return, so that 
   compartments cannot communicate via non-arguments/return-value registers.
   -> Should this invalidation be done with VUndef or a default value like (VInt 0)?
   -> Implement that invalidation in CompCert.

** On the secure compilation proof

[] State the top-level theorem (with blame?) [Jérémy: started working on that]
[] How do we deal with external declarations? Should everything be implemented, i.e. part of our
   program or context "internally" or can we allow some level of external declaration?
[] Figure out some way of splitting a whole C program into context and partial program.
[] State the intermediate lemmas, and prove that their composition results in the
   top-level theorem.
[] Test some of these lemmas (see above).
[] Prove those lemmas:
   [] Back-translation: implement the back-translation from CCS'18 in CompCert C. 
      Prove that it indeed redoes the trace.
      /!\ probably the easiest one of the three
   [] Recomposition: state recomposition at the ASM level.
      Prove it.
      /!\ probably difficult
   [] Blame: state blame. Prove it.
      /!\ difficulty unknown
       
